package com.project.xy.tomatotime.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.xy.tomatotime.Entity.Plan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN".
*/
public class PlanDao extends AbstractDao<Plan, Long> {

    public static final String TABLENAME = "PLAN";

    /**
     * Properties of entity Plan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PlanTitle = new Property(1, String.class, "PlanTitle", false, "PLAN_TITLE");
        public final static Property PlanLevel = new Property(2, String.class, "PlanLevel", false, "PLAN_LEVEL");
        public final static Property EndTime = new Property(3, String.class, "EndTime", false, "END_TIME");
        public final static Property PlanTomatoNum = new Property(4, String.class, "PlanTomatoNum", false, "PLAN_TOMATO_NUM");
        public final static Property Remarks = new Property(5, String.class, "Remarks", false, "REMARKS");
    }


    public PlanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PLAN_TITLE\" TEXT UNIQUE ," + // 1: PlanTitle
                "\"PLAN_LEVEL\" TEXT," + // 2: PlanLevel
                "\"END_TIME\" TEXT," + // 3: EndTime
                "\"PLAN_TOMATO_NUM\" TEXT," + // 4: PlanTomatoNum
                "\"REMARKS\" TEXT);"); // 5: Remarks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String PlanTitle = entity.getPlanTitle();
        if (PlanTitle != null) {
            stmt.bindString(2, PlanTitle);
        }
 
        String PlanLevel = entity.getPlanLevel();
        if (PlanLevel != null) {
            stmt.bindString(3, PlanLevel);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(4, EndTime);
        }
 
        String PlanTomatoNum = entity.getPlanTomatoNum();
        if (PlanTomatoNum != null) {
            stmt.bindString(5, PlanTomatoNum);
        }
 
        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(6, Remarks);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String PlanTitle = entity.getPlanTitle();
        if (PlanTitle != null) {
            stmt.bindString(2, PlanTitle);
        }
 
        String PlanLevel = entity.getPlanLevel();
        if (PlanLevel != null) {
            stmt.bindString(3, PlanLevel);
        }
 
        String EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindString(4, EndTime);
        }
 
        String PlanTomatoNum = entity.getPlanTomatoNum();
        if (PlanTomatoNum != null) {
            stmt.bindString(5, PlanTomatoNum);
        }
 
        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(6, Remarks);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Plan readEntity(Cursor cursor, int offset) {
        Plan entity = new Plan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PlanTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PlanLevel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EndTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PlanTomatoNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Remarks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Plan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlanLevel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlanTomatoNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Plan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Plan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Plan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
