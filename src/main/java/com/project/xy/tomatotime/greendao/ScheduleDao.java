package com.project.xy.tomatotime.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.xy.tomatotime.Entity.Schedule;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCHEDULE".
*/
public class ScheduleDao extends AbstractDao<Schedule, Long> {

    public static final String TABLENAME = "SCHEDULE";

    /**
     * Properties of entity Schedule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Memorandum = new Property(1, String.class, "Memorandum", false, "MEMORANDUM");
        public final static Property StartTime = new Property(2, String.class, "StartTime", false, "START_TIME");
        public final static Property EstimatedTime = new Property(3, String.class, "EstimatedTime", false, "ESTIMATED_TIME");
        public final static Property Remarks = new Property(4, String.class, "Remarks", false, "REMARKS");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
    }


    public ScheduleDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEMORANDUM\" TEXT," + // 1: Memorandum
                "\"START_TIME\" TEXT," + // 2: StartTime
                "\"ESTIMATED_TIME\" TEXT," + // 3: EstimatedTime
                "\"REMARKS\" TEXT," + // 4: Remarks
                "\"TYPE\" TEXT);"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Schedule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Memorandum = entity.getMemorandum();
        if (Memorandum != null) {
            stmt.bindString(2, Memorandum);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(3, StartTime);
        }
 
        String EstimatedTime = entity.getEstimatedTime();
        if (EstimatedTime != null) {
            stmt.bindString(4, EstimatedTime);
        }
 
        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(5, Remarks);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Schedule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Memorandum = entity.getMemorandum();
        if (Memorandum != null) {
            stmt.bindString(2, Memorandum);
        }
 
        String StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindString(3, StartTime);
        }
 
        String EstimatedTime = entity.getEstimatedTime();
        if (EstimatedTime != null) {
            stmt.bindString(4, EstimatedTime);
        }
 
        String Remarks = entity.getRemarks();
        if (Remarks != null) {
            stmt.bindString(5, Remarks);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Schedule readEntity(Cursor cursor, int offset) {
        Schedule entity = new Schedule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Memorandum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // StartTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EstimatedTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Remarks
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Schedule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemorandum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEstimatedTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemarks(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Schedule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Schedule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Schedule entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
